@description('Azure region for all resources')
param location string = resourceGroup().location

@description('Virtual-machine name')
param vmName string = 'hackathon-vm'

@description('Admin username')
param adminUsername string = 'azureuser'

@description('Choose Password or SSHPublicKey authentication')
@allowed([
  'Password'
  'SSHPublicKey'
])
param authType string = 'Password'

@description('Admin password (if authType = Password)')
@secure()
param adminPassword string = ''

@description('SSH public key (if authType = SSHPublicKey)')
param sshPublicKey string = ''

// ---------------------------------------------------------------------
// Naming helpers
// ---------------------------------------------------------------------
var vnetName = '${vmName}-vnet'
var subnetName = 'default'
var nsgName = '${vmName}-nsg'
var pipName = '${vmName}-pip'
var nicName = '${vmName}-nic'

// ---------------------------------------------------------------------
// Networking
// ---------------------------------------------------------------------
resource vnet 'Microsoft.Network/virtualNetworks@2023-09-01' = {
  name: vnetName
  location: location
  properties: {
    addressSpace: { addressPrefixes: [ '10.0.0.0/16' ] }
    subnets: [
      {
        name: subnetName
        properties: {
          addressPrefix: '10.0.0.0/24'
          networkSecurityGroup: { id: nsg.id }
        }
      }
    ]
  }
}

resource nsg 'Microsoft.Network/networkSecurityGroups@2023-09-01' = {
  name: nsgName
  location: location
  properties: {
    securityRules: [
      {
        name: 'Allow-SSH'
        properties: {
          priority: 1001
          direction: 'Inbound'
          access: 'Allow'
          protocol: 'Tcp'
          sourceAddressPrefix: '*'
          sourcePortRange: '*'
          destinationAddressPrefix: '*'
          destinationPortRange: '22'
        }
      }
    ]
  }
}

resource pip 'Microsoft.Network/publicIPAddresses@2023-09-01' = {
  name: pipName
  location: location
  sku: { name: 'Basic' }
  properties: { publicIPAllocationMethod: 'Dynamic' }
}

resource nic 'Microsoft.Network/networkInterfaces@2023-09-01' = {
  name: nicName
  location: location
  properties: {
    ipConfigurations: [
      {
        name: 'ipconfig1'
        properties: {
          subnet: { id: vnet.properties.subnets[0].id }
          privateIPAllocationMethod: 'Dynamic'
          publicIPAddress: { id: pip.id }
        }
      }
    ]
  }
}

// ---------------------------------------------------------------------
// Virtual machine
// ---------------------------------------------------------------------
resource vm 'Microsoft.Compute/virtualMachines@2023-09-01' = {
  name: vmName
  location: location
  // ←–– Learners will insert the governance tags here ––>
  /*
  tags: {
    Environment: 'Dev'
    CostCenter:  'Research'
    Owner:       '<your-name>'
  }
  */
  properties: {
    hardwareProfile: { vmSize: 'Standard_B2s' }
    osProfile: {
      computerName: vmName
      adminUsername: adminUsername
      linuxConfiguration: authType == 'SSHPublicKey'
        ? {
            disablePasswordAuthentication: true
            ssh: {
              publicKeys: [
                {
                  path: '/home/${adminUsername}/.ssh/authorized_keys'
                  keyData: sshPublicKey
                }
              ]
            }
          }
        : {
            disablePasswordAuthentication: false
            adminPassword: adminPassword
          }
    }
    storageProfile: {
      imageReference: {
        publisher: 'Canonical'
        offer:     '0001-com-ubuntu-server-jammy'
        sku:       '22_04-lts'
        version:   'latest'
      }
      osDisk: { createOption: 'FromImage' }
    }
    networkProfile: { networkInterfaces: [ { id: nic.id } ] }
  }
}

// ---------------------------------------------------------------------
// Helpful outputs
// ---------------------------------------------------------------------
output publicIp string = pip.properties.ipAddress
output adminUser string = adminUsername
